#---
#apiVersion: v1
#kind: PersistentVolume            # Create a PersistentVolume
#metadata:
#  name: mysql-pv
#  namespace: xyz-product
#  labels:
#    type: local
#spec:
#  storageClassName: standard      # Storage class. A PV Claim requesting the same storageClass can be bound to this volume. 
#  capacity:
#    storage: 1Gi
#  accessModes:
#    - ReadWriteOnce
#  hostPath:                       # hostPath PersistentVolume is used for development and testing. It uses a file/directory on the Node to emulate network-attached storage
#    path: "/mnt/data"
#  persistentVolumeReclaimPolicy: Delete  # Retain: the PersistentVolume even after PersistentVolumeClaim is deleted. The volume is considered “released”. But it is not yet available for another claim because the previous claimant’s data remains on the volume. 
                                         # Delete: Only for Dev
#---                                      
#apiVersion: v1
#kind: PersistentVolumeClaim        # Create a PersistentVolumeClaim to request a PersistentVolume storage
#metadata:                          # Claim name and labels
#  name: mysql-pv-claim
#  namespace: xyz-product
#  labels:
#    app: product-reg
#spec:                              # Access mode and resource limits
#  storageClassName: standard       # Request a certain storage class
#  accessModes:
#    - ReadWriteOnce                # ReadWriteOnce means the volume can be mounted as read-write by a single Node
#  resources:
#    requests:
#      storage: 1Gi          #250Mi
---
#Create kubernetes secret first to store the DB credentials
#kubectl create secret generic mysql-root-pass --from-literal=password=<INPUT ROOT PASS> -n xyz-product
#kubectl create secret generic mysql-user-pass --from-literal=username=<INPUT DB USERNAME> --from-literal=password=<INPUT PASS> -n xyz-product
#kubectl create secret generic mysql-db-url --from-literal=database=<DB NAME> --from-literal=url='jdbc:mysql://<MYSQL SERVICE NAME>:<MYSQL PORT NO>/<DB NAME>?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false' -n xyz-product


apiVersion: v1                    # API version
kind: Service                     # Type of kubernetes resource 
metadata:
  name: product-reg-mysql         # Name of the resource
  namespace: xyz-product
  labels:                         # Labels that will be applied to the resource
    app: product-reg
spec:
  ports:
    - port: 3306
  selector:                       # Selects any Pod with labels `app=product-reg,tier=mysql`
    app: product-reg
    tier: mysql
  clusterIP: None
  
---

apiVersion: apps/v1
kind: Deployment                    # Type of the kubernetes resource
metadata:
  name: product-reg-mysql           # Name of the deployment
  namespace: xyz-product
  labels:                           # Labels applied to this deployment 
    app: product-reg
spec:
  selector:
    matchLabels:                    # This deployment applies to the Pods matching the specified labels
      app: product-reg
      tier: mysql
  strategy:
    type: Recreate
  template:                         # Template for the Pods in this deployment
    metadata:
      labels:                       # Labels to be applied to the Pods in this deployment
        app: product-reg
        tier: mysql
    spec:                           # The spec for the containers that will be run inside the Pods in this deployment
      containers:
      - image: mysql:5.6            # The container image
        name: prd-reg-mysql
        env:                        # Environment variables passed to the container 
        - name: MYSQL_ROOT_PASSWORD 
          valueFrom:                # Read environment variables from kubernetes secrets
            secretKeyRef:
              name: mysql-root-pass
              key: password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-db-url
              key: database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-user-pass
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-user-pass
              key: password
        ports:
        - containerPort: 3306        # The port that the container exposes       
          name: prd-reg-mysql
        volumeMounts:
        - name: mysql-persistent-storage  # This name should match the name specified in `volumes.name`
          mountPath: /var/lib/mysql
      volumes:                       # A PersistentVolume is mounted as a volume to the Pod  
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim