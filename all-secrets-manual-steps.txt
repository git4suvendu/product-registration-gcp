#Generate the SSL/TLS Key/Cert (Mandatory and Manual Step)
#------------------------------------------------------------

#Namespace creation (If namepsce already exists then no need to worry)
kubectl create namespace haproxy-controller    
kubectl create namespace xyz-product          

#TLS Certificate Creation for SSL connection (Default)
openssl req  -x509 -newkey rsa:2048 -nodes -days 365  -keyout default-tls.key -out default-tls.crt -subj '/CN=localhost'
kubectl create secret tls default-tls-secret --cert=default-tls.crt --key=default-tls.key -n haproxy-controller
rm -v default-tls.key default-tls.crt

#TLS Certificate Creation for SSL connection (Host Specific)
openssl req  -x509 -newkey rsa:2048 -nodes -days 365  -keyout prod-tls.key -out prod-tls.crt -subj '/CN=demo.apps.product.barnsleypujo.co.uk'
kubectl create secret tls prod-tls-secret --cert=prod-tls.crt --key=prod-tls.key -n xyz-product
rm -v prod-tls.key prod-tls.crt


#MySQL DB credentials creation
kubectl create secret generic mysql-root-pass --from-literal=password=R00t -n xyz-product
kubectl create secret generic mysql-user-pass --from-literal=username=suvendu --from-literal=password=mandal@01 -n xyz-product
kubectl create secret generic mysql-db-url --from-literal=database=product --from-literal=url='jdbc:mysql://product-reg-mysql:3306/product?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false' -n xyz-product

#GCP Service Account credential creation. (gcp-service-account-key.json file must be present in the directory. 
# Download gcp-service-account-key.json file after creating service account in GCP
kubectl create secret generic gcp-service-account-secret --from-file=gcp-service-account-key=gcp-service-account-key.json -n xyz-product



 

 